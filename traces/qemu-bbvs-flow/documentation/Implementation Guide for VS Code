# Implementation Guide for VS Code

This guide provides step-by-step instructions to implement the QEMU SimPoint Unified Analysis project in VS Code.

## Prerequisites Setup

### 1. Install Required Software

#### Windows
1. **Install WSL 2**:
   - Open PowerShell as Administrator
   - Run: `wsl --install`
   - Restart computer
   - Set up Ubuntu user account

2. **Install Docker Desktop**:
   - Download from [Docker Desktop](https://www.docker.com/products/docker-desktop)
   - Install and restart
   - Open Docker Desktop
   - Go to Settings → General → Enable "Use WSL 2 based engine"
   - Go to Settings → Resources → WSL Integration → Enable Ubuntu

3. **Install VS Code**:
   - Download from [VS Code](https://code.visualstudio.com/)
   - Install with default settings

#### Linux/macOS
1. **Install Docker**:
   ```bash
   # Ubuntu/Debian
   sudo apt update && sudo apt install docker.io
   sudo systemctl start docker
   sudo usermod -aG docker $USER
   
   # macOS
   brew install --cask docker
   ```

2. **Install VS Code**:
   - Download from [VS Code](https://code.visualstudio.com/)

### 2. Install VS Code Extensions

Open VS Code and install these extensions:

1. **Remote - WSL** (Windows only)
   - Extension ID: `ms-vscode-remote.remote-wsl`

2. **Docker**
   - Extension ID: `ms-azuretools.vscode-docker`

3. **Remote - Containers**
   - Extension ID: `ms-vscode-remote.remote-containers`

4. **Shell Script Support**
   - Extension ID: `timonwong.shellcheck`


## Testing the Implementation

### 1. Verify File Permissions
```bash
# Check all scripts are executable
ls -la *.sh
```

### 2. Test Docker Build
```bash
# Build the Docker image
./build_docker.sh
```

### 3. Run Test Analysis
```bash
# Test with Dhrystone
./build_and_run.sh dhrystone
```

### 4. Verify Results
```bash
# Check generated files
ls -la simpoint_output/
```

## Using VS Code Features

### 1. Integrated Terminal
- Press `Ctrl+` ` to open terminal
- Run commands directly in VS Code terminal
- Multiple terminal instances for parallel work

### 2. File Explorer
- Navigate project structure easily
- Quick file access and editing
- File search with `Ctrl+P`

### 3. Docker Integration
- View Docker images and containers
- Build images from VS Code
- Container logs and inspection

### 4. Running Tasks
- Press `Ctrl+Shift+P`
- Type "Tasks: Run Task"
- Select desired task (Build, Run Analysis, etc.)

### 5. Debugging
- Set breakpoints in shell scripts
- Use integrated debugging tools
- Monitor container execution

## Development Workflow

### 1. Daily Usage
```bash
# Open project
code ~/projects/qemu-bbvs-flow

# Build and test
Ctrl+Shift+P → Tasks: Run Task → Build Docker Image
Ctrl+Shift+P → Tasks: Run Task → Run Dhrystone Analysis
```

### 2. Adding New Workloads
1. Edit `setup_workload.sh` in VS Code
2. Add new case statement
3. Update `workload_config.json`
4. Test with new workload

### 3. Customizing Analysis
1. Modify parameters in `run_workload.sh`
2. Test different compiler flags
3. Analyze results in `simpoint_output/`

### 4. Troubleshooting
1. Check Docker extension for container status
2. View integrated terminal for error messages
3. Use VS Code's problem detection
4. Check file permissions and syntax



This implementation guide provides a complete setup for developing and using the QEMU SimPoint Analysis project in VS Code with full Docker integration and development workflow support.